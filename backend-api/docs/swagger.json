{
    "openapi": "3.0.2",
    "info": {
        "title": "GachaMachines-API",
        "version": "1.0.0",
        "description": "### This is a Swagger UI for our GachaMachines API"
    },
    "paths": {
        "/gachas": {
            "summary": "1.0.0",
            "description": "This is a Swagger UI for our Gachapon machines API",
            "get": {
                "tags": [
                    "machines"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Added a new Gachapon machine."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Table not found"
                    }
                },
                "summary": "Get a list of all Gacha machines",
                "description": "Returns a list of all Gachapon machines in API"
            },
            "post": {
                "requestBody": {
                    "description": "A new Gacha machine to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Gachas"
                            },
                            "examples": {
                                "base": {
                                    "value": {
                                        "id": 6,
                                        "name": "addmachinetest",
                                        "item1Rarity": 0,
                                        "item2Rarity": 2,
                                        "item3Rarity": 0,
                                        "item4Rarity": 1,
                                        "item5Rarity": 0,
                                        "item6Rarity": 1,
                                        "item7Rarity": 0,
                                        "item8Rarity": 0,
                                        "item9Rarity": 0,
                                        "item10Rarity": 0,
                                        "gachaAmount": 100
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "machines"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Returns a list of Gacha machines"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Adds a new gachapon machine to the database."
                    }
                },
                "summary": "Create a new Gacha machine"
            }
        },
        "/gachas/{gachasId}": {
            "summary": "Path used to manage single Gachas.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Gachas`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "machines"
                ],
                "parameters": [
                    {
                        "name": "gachasId",
                        "description": "A unique identifier for a `Gachas`.",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns a given Id `Gachas`."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "404 Gachapon machine not found"
                    }
                },
                "operationId": "Id",
                "summary": "Get Gacha machine by ID",
                "description": "Returs full details of a given Id Gachapon machine"
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Gachas` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Gachas"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "machines"
                ],
                "parameters": [
                    {
                        "name": "gachasId",
                        "description": "A unique identifier for a `Gachas`.",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Gacha was updated"
                    },
                    "404": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "machine not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "updateGachas",
                "summary": "Update Gachas",
                "description": "Updates an existing `Gacha`."
            },
            "delete": {
                "tags": [
                    "machines"
                ],
                "parameters": [
                    {
                        "name": "gachasId",
                        "description": "A unique identifier for a `Gachas`.",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response."
                    },
                    "404": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "404 Not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "deleteGachas",
                "summary": "Delete Gachas",
                "description": "Deletes an existing `Gachas`."
            },
            "parameters": [
                {
                    "name": "gachasId",
                    "description": "A unique identifier for a `Gachas`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/users": {
            "description": "This is a Swagger UI for our Users API",
            "get": {
                "tags": [
                    "customers"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "examples": {
                                    "List of users": {
                                        "value": [
                                            "User 1",
                                            "User 2"
                                        ]
                                    }
                                }
                            }
                        },
                        "description": "All good, returning user list\n"
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Table not found"
                    }
                },
                "summary": "Get a list of all the users",
                "description": "Returns a list of all users in database"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            },
                            "examples": {
                                "base": {
                                    "value": {
                                        "UserName": "username",
                                        "UserPass": "password"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "customers"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Returns a list of Users"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Adds a new User to the database."
                    }
                },
                "summary": "Add User"
            }
        },
        "/users/{userId}": {
            "summary": "Path used to manage single Users.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `User`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "customers"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "description": "A unique identifier for a `User`.",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns a given Id `User`."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "404 User not found"
                    }
                },
                "operationId": "UserId",
                "summary": "Get User by ID",
                "description": "Returs full details of a given Id User"
            },
            "put": {
                "requestBody": {
                    "description": "Updated `User` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "customers"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "User was updated"
                    },
                    "404": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "User not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "updateUsers",
                "summary": "Update Users",
                "description": "Updates an existing `User`."
            },
            "delete": {
                "tags": [
                    "customers"
                ],
                "responses": {
                    "204": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response."
                    },
                    "404": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "404 Not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "deleteUser",
                "summary": "Delete User",
                "description": "Deletes an existing `User`."
            },
            "parameters": [
                {
                    "name": "userId",
                    "description": "A unique identifier for a `User`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/items": {
            "summary": "Path used to manage the list of items.",
            "description": "The REST endpoint/path used to list and create zero or more `Item` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "items"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns all Items"
                    },
                    "404": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Table not found"
                    }
                },
                "operationId": "getItems",
                "summary": "Get a list of all Items",
                "description": "Gets a list of all `Item`"
            },
            "post": {
                "requestBody": {
                    "description": "A new `Item` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Item"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "items"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Returns a list of all Items"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Adds a new item to the database."
                    }
                },
                "operationId": "createItem",
                "summary": "Create a Item",
                "description": "Creates a new instance of a `Item`."
            }
        },
        "/items/{itemId}": {
            "summary": "Path used to manage a single Item.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Item`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "items"
                ],
                "parameters": [
                    {
                        "name": "itemId",
                        "description": "A unique identifier for a `Item`.",
                        "schema": {
                            "type": "integer"
                        },
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Item`."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Item not found"
                    }
                },
                "operationId": "itemID",
                "summary": "Get a Item by ID",
                "description": "Gets the details of a single instance of a `Item`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Item` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Item"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "items"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Item was updated"
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Item not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "updateItem",
                "summary": "Update Item",
                "description": "Updates an existing `Item`."
            },
            "delete": {
                "tags": [
                    "items"
                ],
                "responses": {
                    "204": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response."
                    },
                    "404": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "404 not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "deleteItem",
                "summary": "Delete a Item",
                "description": "Deletes an existing `Item`."
            },
            "parameters": [
                {
                    "name": "itemId",
                    "description": "A unique identifier for a `Item`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/ownerships": {
            "summary": "Path used to manage the list of ownerships.",
            "description": "The REST endpoint/path used to list and create zero or more `Ownership` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "ownership"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Ownership` entities."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Table not found"
                    }
                },
                "operationId": "getOwnerships",
                "summary": "List All Ownerships",
                "description": "Gets a list of all `Ownership` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Ownership` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Ownership"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "ownership"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Adds ownership details to the database."
                    }
                },
                "operationId": "createOwnership",
                "summary": "Create a Ownership",
                "description": "Creates a new instance of a `Ownership`."
            }
        },
        "/ownerships/{ownershipId}": {
            "summary": "Path used to manage a single Ownership.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Ownership`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "ownership"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Ownership`."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Ownership Id not found"
                    }
                },
                "operationId": "getOwnership",
                "summary": "Get a Ownership by ID",
                "description": "Gets the details of a single instance of a `Ownership`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Ownership` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Ownership"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "ownership"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Ownership was updated"
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Ownership not found"
                    },
                    "500": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "updateOwnership",
                "summary": "Update a Ownership",
                "description": "Updates an existing `Ownership`."
            },
            "delete": {
                "tags": [
                    "ownership"
                ],
                "responses": {
                    "204": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "404 Not found"
                    },
                    "500": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "deleteOwnership",
                "summary": "Delete a Ownership",
                "description": "Deletes an existing `Ownership`."
            },
            "parameters": [
                {
                    "name": "ownershipId",
                    "description": "A unique identifier for a `Ownership`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/raritylists": {
            "summary": "Path used to manage the list of raritylists.",
            "description": "The REST endpoint/path used to list and create zero or more `RarityList` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "RarityList"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `RarityList` entities."
                    },
                    "404": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "404, rarity list not found\n"
                    }
                },
                "operationId": "getRarityLists",
                "summary": "List All RarityLists",
                "description": "Gets a list of all `RarityList` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `RarityList` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "RarityList"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Returns a list of Raritylists"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Adds a new raritylist to database"
                    }
                },
                "operationId": "createRarityList",
                "summary": "Create a RarityList",
                "description": "Creates a new instance of a `RarityList`."
            }
        },
        "/raritylists/{raritylistId}": {
            "summary": "Path used to manage a single RarityList.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `RarityList`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "RarityList"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RarityList"
                                }
                            }
                        },
                        "description": "Successful response - returns a single `RarityList`."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "404 raritylist not found"
                    }
                },
                "operationId": "getRarityList",
                "summary": "Get a RarityList",
                "description": "Gets the details of a single instance of a `RarityList`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `RarityList` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RarityList"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "RarityList"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Raritylist has been updated"
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Raritylist not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Internal server error"
                    }
                },
                "operationId": "updateRarityList",
                "summary": "Update a RarityList",
                "description": "Updates an existing `RarityList`."
            },
            "delete": {
                "tags": [
                    "RarityList"
                ],
                "responses": {
                    "204": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "404 not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "internal server error"
                    }
                },
                "operationId": "deleteRarityList",
                "summary": "Delete a RarityList",
                "description": "Deletes an existing `RarityList`."
            },
            "parameters": [
                {
                    "name": "raritylistId",
                    "description": "A unique identifier for a `RarityList`.",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/rewards": {
            "summary": "Path used to manage the list of rewards.",
            "description": "The REST endpoint/path used to list and create zero or more `Reward` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
            "get": {
                "tags": [
                    "rewards"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns an array of `Reward` entities."
                    },
                    "404": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "description": "Table not found"
                    }
                },
                "operationId": "getRewards",
                "summary": "List All Rewards",
                "description": "Gets a list of all `Reward` entities."
            },
            "post": {
                "requestBody": {
                    "description": "A new `Reward` to be created.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Reward"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "rewards"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Adds new reward to database"
                    }
                },
                "operationId": "createReward",
                "summary": "Create a Reward",
                "description": "Creates a new instance of a `Reward`."
            }
        },
        "/rewards/{rewardId}": {
            "summary": "Path used to manage a single Reward.",
            "description": "The REST endpoint/path used to get, update, and delete single instances of an `Reward`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
            "get": {
                "tags": [
                    "rewards"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Successful response - returns a single `Reward`."
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Reward not found"
                    }
                },
                "operationId": "getReward",
                "summary": "Get a Reward",
                "description": "Gets the details of a single instance of a `Reward`."
            },
            "put": {
                "requestBody": {
                    "description": "Updated `Reward` information.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Reward"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "rewards"
                ],
                "responses": {
                    "200": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Reward was updated"
                    },
                    "404": {
                        "headers": {
                            "location": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                }
                            }
                        },
                        "description": "Reward not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Internal Server Error"
                    }
                },
                "operationId": "updateReward",
                "summary": "Update a Reward",
                "description": "Updates an existing `Reward`."
            },
            "delete": {
                "tags": [
                    "rewards"
                ],
                "responses": {
                    "204": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Successful response."
                    },
                    "404": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "404 not found"
                    },
                    "500": {
                        "headers": {
                            "location": {}
                        },
                        "content": {
                            "application/json": {}
                        },
                        "description": "Interna Server Error"
                    }
                },
                "operationId": "deleteReward",
                "summary": "Delete a Reward",
                "description": "Deletes an existing `Reward`."
            },
            "parameters": [
                {
                    "name": "rewardId",
                    "description": "A unique identifier for a `Reward`.",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "Gachas": {
                "description": "",
                "required": [
                    "name",
                    "gachaAmount"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the Gachapon machine.",
                        "type": "string"
                    },
                    "gachaAmount": {
                        "description": "Shows how many items are left in the Gachapon machine.",
                        "type": "integer"
                    },
                    "description": {
                        "description": "",
                        "type": "string"
                    }
                }
            },
            "error": {
                "title": "Root Type for error",
                "description": "",
                "type": "object",
                "properties": {
                    "error": {
                        "type": "string"
                    }
                },
                "example": {
                    "error": "Error message."
                }
            },
            "User": {
                "description": "",
                "required": [
                    "UserName",
                    "UserPass"
                ],
                "type": "object",
                "properties": {
                    "UserName": {
                        "description": "Username of customer",
                        "type": "string"
                    },
                    "UserPass": {
                        "description": "Password of the customer",
                        "type": "string"
                    }
                }
            },
            "Item": {
                "description": "Gachapon machines item",
                "required": [
                    "ItemName",
                    "ItemDescription",
                    "ItemImageLink",
                    "ItemSupply",
                    "ItemRarity"
                ],
                "type": "object",
                "properties": {
                    "ItemDescription": {
                        "description": "Description of the item",
                        "type": "string"
                    },
                    "ItemImageLink": {
                        "description": "Link to the picture of the item",
                        "type": "string"
                    },
                    "ItemName": {
                        "description": "Name of the item",
                        "type": "string"
                    },
                    "ItemSupply": {
                        "description": "Supply of the item",
                        "type": "integer"
                    },
                    "ItemRarity": {
                        "description": "FK Id for which rarity the item belongs to ",
                        "type": "integer"
                    }
                }
            },
            "Ownership": {
                "description": "Shows items user owns and it's ammount",
                "required": [
                    "Amount"
                ],
                "type": "object",
                "properties": {
                    "OwnershipUserId": {
                        "description": "FK of the users id",
                        "type": "integer"
                    },
                    "OwnershipItemId": {
                        "description": "FK of the items id",
                        "type": "integer"
                    },
                    "Amount": {
                        "description": "Amount of items owned by user",
                        "type": "integer"
                    }
                }
            },
            "RarityList": {
                "description": "A list that contains all the items in a rarity list for a given machine",
                "required": [
                    "RarityValue",
                    "RarityName",
                    "GachaID"
                ],
                "type": "object",
                "properties": {
                    "RarityValue": {
                        "description": "Number that correlates the rarity for randomizer",
                        "type": "integer"
                    },
                    "RarityName": {
                        "description": "Name of the rarity type",
                        "type": "string"
                    },
                    "GachaID": {
                        "description": "FK Id of the machine that raritylist belongs to",
                        "type": "integer"
                    }
                }
            },
            "Reward": {
                "description": "Connection between machine and selected item",
                "required": [
                    "GachaId",
                    "ItemId",
                    "Amount"
                ],
                "type": "object",
                "properties": {
                    "GachaId": {
                        "description": "Id of rewards owner machine",
                        "type": "integer"
                    },
                    "ItemId": {
                        "description": "Id of the rewards item",
                        "type": "integer"
                    },
                    "Amount": {
                        "description": "",
                        "type": "integer"
                    }
                }
            }
        }
    }
}